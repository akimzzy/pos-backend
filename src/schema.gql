# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Branch {
  address: String
  createdDate: DateTime!
  id: ID!
  name: String!
  updatedDate: DateTime!
  user: User!
}

input CreateAccountInput {
  email: String!
  password: String!
}

input CreateBranchInput {
  address: String
  name: String!
  userId: String
}

input CreateCustomerInput {
  phone: String!
}

input CreateItemCategoryInput {
  name: String!
}

input CreateItemInput {
  category: String = "default"
  description: String
  name: String!
  userId: String
  variants: [CreateVariantInput!]
}

input CreateStockInput {
  reason: StockReason!
  stockQuantity: Int!
  transactionId: ID
  variantId: ID!
}

input CreateTransactionInput {
  customerId: String
  items: [CreateTransactionItemInput!]!
}

input CreateTransactionItemInput {
  quantity: Int!
  transactionId: ID
  variantId: ID!
}

input CreateVariantInput {
  name: String!
  price: Int!
  quantity: Int = 0
}

type Customer {
  createdDate: DateTime!
  customerId: String!
  email: String
  id: ID!
  name: String
  phone: String
  transactions: [Transaction!]!
  updatedDate: DateTime!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteResponse {
  message: String!
}

type Item {
  categories: [ItemCategory!]
  createdDate: DateTime!
  description: String
  id: ID!
  name: String!
  updatedDate: DateTime!
  user: User!
  variants: [Variant!]!
}

type ItemCategory {
  createdDate: DateTime!
  id: ID!
  items: [Item!]
  name: String!
  updatedDate: DateTime!
  user: User!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

type Mutation {
  addItemsToCategory(categoryId: String!, itemIds: [String!]!): ItemCategory!
  createAccount(createAccountInput: CreateAccountInput!): LoginResponse!
  createBranch(createBranchInput: CreateBranchInput!): Branch!
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  createItem(createItemInput: CreateItemInput!): Item!
  createItemCategory(createItemCategoryInput: CreateItemCategoryInput!): ItemCategory!
  createStock(createStockInput: CreateStockInput!): Stock!
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  createVariants(createVariantsInput: [CreateVariantInput!]!, itemId: String!): [Variant!]!
  login(email: String!, password: String!): LoginResponse!
  removeBranch(id: String!): Branch!
  removeCustomer(id: Int!): Customer!
  removeItem(id: Int!): Item!
  removeItemsCategory(id: String!): DeleteResponse!
  removeTransactionItem(id: Int!): TransactionItem!
  removeVariants(createVariantInput: [String!]!): DeleteResponse!
  updateBranch(updateBranchInput: UpdateBranchInput!): Branch!
  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!
  updateItem(id: String!, updateItemInput: UpdateItemInput!): Item!
  updateItemCategory(id: String!, updateItemCategoryInput: UpdateItemCategoryInput!): ItemCategory!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
  updateTransactionItem(updateTransactionItemInput: UpdateTransactionItemInput!): TransactionItem!
  updateVariant(id: String!, updateVariantInput: CreateVariantInput!): Variant!
}

type Query {
  branch(id: String!): Branch!
  branches: [Branch!]!
  customer(id: String!): Customer!
  customers: [Customer!]!
  item(id: String!): Item!
  itemCategories: [ItemCategory!]!
  itemCategory(id: String!): ItemCategory!
  items: [Item!]!
  stock(variantId: String): [Stock!]!
  transaction(id: String!): Transaction!
  transactionItem(id: Int!): TransactionItem!
  transactions: [Transaction!]!
  user: User!
  users: [User!]!
}

type Stock {
  balance: Int!
  createdDate: DateTime!
  id: ID!
  reason: StockReason!
  stockQuantity: Int!
  transaction: Transaction
  type: StockType!
  updatedDate: DateTime!
  user: User!
  variant: Variant!
}

enum StockReason {
  DAMAGED
  EXPIRED
  RECEIVED
  RETURN
  RE_COUNT
  SOLD
  THEFT
}

enum StockType {
  ADD
  REMOVE
  RESET
}

type Transaction {
  amount: Int!
  createdDate: DateTime!
  customer: Customer!
  id: ID!
  stocks: [Stock!]!
  transactionItems: [TransactionItem!]!
  updatedDate: DateTime!
  user: User!
}

type TransactionItem {
  amount: Int!
  createdDate: DateTime!
  id: ID!
  quantity: Int!
  transaction: Transaction!
  updatedDate: DateTime!
  variant: Variant!
}

input UpdateBranchInput {
  address: String
  id: String!
  name: String
  userId: String
}

input UpdateCustomerInput {
  id: Int!
  phone: String
}

input UpdateItemCategoryInput {
  name: String
}

input UpdateItemInput {
  description: String
  name: String
}

input UpdateTransactionInput {
  customerId: String
  id: Int!
  items: [CreateTransactionItemInput!]
}

input UpdateTransactionItemInput {
  id: Int!
  quantity: Int
  transactionId: ID
  variantId: ID
}

type User {
  branches: [Branch!]
  categories: [ItemCategory!]!
  createdDate: DateTime!
  customers: [Customer!]!
  email: String!
  id: ID!
  items: [Item!]!
  password: String
  stocks: [Stock!]!
  transactions: [Transaction!]!
  updatedDate: DateTime!
}

type Variant {
  availableForSale: Boolean!
  createdDate: DateTime!
  id: ID!
  item: Item!
  name: String!
  price: Int!
  quantity: Int
  stockTracking: Boolean!
  stocks: [Stock!]!
  transactionItems: [TransactionItem!]
  updatedDate: DateTime!
}